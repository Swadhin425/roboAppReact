{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","map","user","index","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f04f9562.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots ={\r\n    isPending:false,\r\n    robots: [],\r\n    error:''\r\n    \r\n\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n   \r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200*200`} alt=\"Robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList =({robots}) =>{\r\n\r\n    return(\r\n        <div>\r\n         {\r\n             robots.map((user,index)=>{\r\n                return <Card \r\n                 id={robots[index].id} \r\n                 name={robots[index].name}\r\n                 email={robots[index].email}\r\n                 key={index}\r\n                 />\r\n            })\r\n         }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\nreturn (\r\n   <div style={{overflowY:'scroll',border:'5px solid red',height:'650px'}}>\r\n       {props.children}\r\n   </div> \r\n)\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input className='pa3 ba b--green bg-lightest-blue'\r\n      type=\"search\" \r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nimport {setSearchField, requestRobots} from '../actions'\r\nimport {   connect } from \"react-redux\";\r\n\r\n class App extends React.Component {\r\n  \r\n\r\n  componentDidMount() {\r\n  \r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((resopnse) => resopnse.json())\r\n    //   .then((users) => {\r\n    //     this.setState({ robots: users });\r\n    //   });\r\n\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchField: event.target.value });\r\n  //   console.log(event.target.value);\r\n  // };\r\n  render() {\r\n    //const { robots } = this.state;\r\n\r\n   \r\n    const {searchField,onSearchChange,robots,isPending} =this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robo Friends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    searchField:state.searchRobots.searchField,\r\n    robots:state.requestRobots.robots,\r\n    isPending:state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch)=>{\r\n  return {\r\n    onSearchChange:(event) =>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () =>  dispatch(requestRobots())\r\n  }\r\n  \r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField =(text)=>({\r\n  type:CHANGE_SEARCH_FIELD,\r\n  payload:text\r\n})\r\n\r\nexport const requestRobots =()=> (dispatch) =>{\r\n  dispatch({type:REQUEST_ROBOTS_PENDING});\r\n\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n      .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore ,applyMiddleware,combineReducers} from \"redux\";\nimport {createLogger} from 'redux-logger';\nimport { searchRobots,requestRobots } from \"./reducers\";\nimport thunkMiddleware  from 'redux-thunk';\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nconst logger= createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}